{"version":3,"sources":["data.mjs"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport spawn from 'cross-spawn-cb';\nimport mkdirp from 'mkdirp';\nimport { tmpdir } from 'os-shim';\nimport Queue from 'queue-cb';\nimport shortHash from 'short-hash';\n\nimport prepareGit from './prepareGit.mjs';\n\nexport default function data(git, options, callback) {\n  const cwd = options.cwd || process.cwd();\n  const pkg = JSON.parse(fs.readFileSync(path.join(cwd, 'package.json'), 'utf8'));\n  const dest = path.join(tmpdir(), pkg.name, shortHash(cwd));\n  const targetName = path.basename(git, path.extname(git));\n  const targetPath = path.join(dest, targetName);\n  mkdirp.sync(dest);\n\n  const queue = new Queue(1);\n  for (const binName in pkg.bin) {\n    const packagePath = path.resolve(targetPath, 'node_modules', pkg.name);\n    const binPath = path.resolve(targetPath, 'node_modules', '.bin', binName);\n\n    console.log('------------------');\n    console.log(`Preparing: ${targetPath}`);\n\n    // clone or reset the git repo\n    queue.defer(prepareGit.bind(null, git, options));\n\n    // install\n    queue.defer(spawn.bind(null, 'nvu', ['lts', '--silent', 'npm', 'install'], { stdio: 'inherit', cwd: targetPath }));\n\n    // link package\n    queue.defer(fs.rename.bind(null, packagePath, `${packagePath}.tsds`));\n    queue.defer(fs.symlink.bind(null, cwd, packagePath, 'dir'));\n\n    // link bin\n    queue.defer(fs.rename.bind(null, binPath, `${binPath}.tsds`));\n    queue.defer(fs.symlink.bind(null, path.resolve.apply(null, [cwd].concat(pkg.bin[binName].split('/'))), binPath, 'file'));\n\n    queue.await((err) => {\n      console.log('------------------');\n      err ? callback(err) : callback(null, targetPath);\n    });\n  }\n}\n"],"names":["data","git","options","callback","cwd","process","pkg","JSON","parse","fs","readFileSync","path","join","dest","tmpdir","name","shortHash","targetName","basename","extname","targetPath","mkdirp","sync","queue","Queue","binName","bin","packagePath","resolve","binPath","console","log","defer","prepareGit","bind","spawn","stdio","rename","symlink","apply","concat","split","await","err"],"mappings":";;;;+BAUA;;;eAAwBA;;;yDAVT;2DACE;mEACC;6DACC;sBACI;8DACL;gEACI;iEAEC;;;;;;AAER,SAASA,KAAKC,GAAG,EAAEC,OAAO,EAAEC,QAAQ;IACjD,IAAMC,MAAMF,QAAQE,GAAG,IAAIC,QAAQD,GAAG;IACtC,IAAME,MAAMC,KAAKC,KAAK,CAACC,WAAE,CAACC,YAAY,CAACC,aAAI,CAACC,IAAI,CAACR,KAAK,iBAAiB;IACvE,IAAMS,OAAOF,aAAI,CAACC,IAAI,CAACE,IAAAA,cAAM,KAAIR,IAAIS,IAAI,EAAEC,IAAAA,kBAAS,EAACZ;IACrD,IAAMa,aAAaN,aAAI,CAACO,QAAQ,CAACjB,KAAKU,aAAI,CAACQ,OAAO,CAAClB;IACnD,IAAMmB,aAAaT,aAAI,CAACC,IAAI,CAACC,MAAMI;IACnCI,eAAM,CAACC,IAAI,CAACT;IAEZ,IAAMU,QAAQ,IAAIC,gBAAK,CAAC;IACxB,IAAK,IAAMC,WAAWnB,IAAIoB,GAAG,CAAE;QAC7B,IAAMC,cAAchB,aAAI,CAACiB,OAAO,CAACR,YAAY,gBAAgBd,IAAIS,IAAI;QACrE,IAAMc,UAAUlB,aAAI,CAACiB,OAAO,CAACR,YAAY,gBAAgB,QAAQK;QAEjEK,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC,AAAC,cAAwB,OAAXX;QAE1B,8BAA8B;QAC9BG,MAAMS,KAAK,CAACC,mBAAU,CAACC,IAAI,CAAC,MAAMjC,KAAKC;QAEvC,UAAU;QACVqB,MAAMS,KAAK,CAACG,qBAAK,CAACD,IAAI,CAAC,MAAM,OAAO;YAAC;YAAO;YAAY;YAAO;SAAU,EAAE;YAAEE,OAAO;YAAWhC,KAAKgB;QAAW;QAE/G,eAAe;QACfG,MAAMS,KAAK,CAACvB,WAAE,CAAC4B,MAAM,CAACH,IAAI,CAAC,MAAMP,aAAa,AAAC,GAAc,OAAZA,aAAY;QAC7DJ,MAAMS,KAAK,CAACvB,WAAE,CAAC6B,OAAO,CAACJ,IAAI,CAAC,MAAM9B,KAAKuB,aAAa;QAEpD,WAAW;QACXJ,MAAMS,KAAK,CAACvB,WAAE,CAAC4B,MAAM,CAACH,IAAI,CAAC,MAAML,SAAS,AAAC,GAAU,OAARA,SAAQ;QACrDN,MAAMS,KAAK,CAACvB,WAAE,CAAC6B,OAAO,CAACJ,IAAI,CAAC,MAAMvB,aAAI,CAACiB,OAAO,CAACW,KAAK,CAAC,MAAM;YAACnC;SAAI,CAACoC,MAAM,CAAClC,IAAIoB,GAAG,CAACD,QAAQ,CAACgB,KAAK,CAAC,QAAQZ,SAAS;QAEhHN,MAAMmB,KAAK,CAAC,SAACC;YACXb,QAAQC,GAAG,CAAC;YACZY,MAAMxC,SAASwC,OAAOxC,SAAS,MAAMiB;QACvC;IACF;AACF"}