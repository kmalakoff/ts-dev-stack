{"version":3,"sources":["data.mjs"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport spawn from 'cross-spawn-cb';\nimport mkdirp from 'mkdirp';\nimport { tmpdir } from 'os-shim';\nimport Queue from 'queue-cb';\nimport shortHash from 'short-hash';\n\nimport prepareGit from './prepareGit.mjs';\n\nexport default function data(git, options, callback) {\n  const cwd = options.cwd || process.cwd();\n  const pkg = JSON.parse(fs.readFileSync(path.join(cwd, 'package.json'), 'utf8'));\n  const dest = path.join(tmpdir(), pkg.name, shortHash(cwd));\n  const targetName = path.basename(git, path.extname(git));\n  const targetPath = path.join(dest, targetName);\n  mkdirp.sync(dest);\n\n  const queue = new Queue(1);\n  for (const binName in pkg.bin) {\n    const packagePath = path.resolve(targetPath, 'node_modules', pkg.name);\n    const binPath = path.resolve(targetPath, 'node_modules', '.bin', binName);\n\n    console.log('------------------');\n    console.log(`Preparing: ${targetPath}`);\n\n    // clone or reset the git repo\n    queue.defer(prepareGit.bind(null, git, options));\n\n    // install\n    queue.defer(spawn.bind(null, 'nvu', ['lts', '--silent', 'npm', 'install'], { stdio: 'inherit', cwd: targetPath }));\n\n    // link package\n    queue.defer(fs.rename.bind(null, packagePath, `${packagePath}.tsds`));\n    queue.defer(fs.symlink.bind(null, cwd, packagePath, 'dir'));\n\n    // link bin\n    queue.defer(fs.rename.bind(null, binPath, `${binPath}.tsds`));\n    queue.defer(fs.symlink.bind(null, path.resolve.apply(null, [cwd].concat(pkg.bin[binName].split('/'))), binPath, 'file'));\n\n    queue.await((err) => {\n      console.log('------------------');\n      err ? callback(err) : callback(null, targetPath);\n    });\n  }\n}\n"],"names":["fs","path","spawn","mkdirp","tmpdir","Queue","shortHash","prepareGit","data","git","options","callback","cwd","process","pkg","JSON","parse","readFileSync","join","dest","name","targetName","basename","extname","targetPath","sync","queue","binName","bin","packagePath","resolve","binPath","console","log","defer","bind","stdio","rename","symlink","apply","concat","split","await","err"],"mappings":"AAAA,OAAOA,QAAQ,KAAK;AACpB,OAAOC,UAAU,OAAO;AACxB,OAAOC,WAAW,iBAAiB;AACnC,OAAOC,YAAY,SAAS;AAC5B,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,WAAW,WAAW;AAC7B,OAAOC,eAAe,aAAa;AAEnC,OAAOC,gBAAgB,mBAAmB;AAE1C,eAAe,SAASC,KAAKC,GAAG,EAAEC,OAAO,EAAEC,QAAQ;IACjD,MAAMC,MAAMF,QAAQE,GAAG,IAAIC,QAAQD,GAAG;IACtC,MAAME,MAAMC,KAAKC,KAAK,CAAChB,GAAGiB,YAAY,CAAChB,KAAKiB,IAAI,CAACN,KAAK,iBAAiB;IACvE,MAAMO,OAAOlB,KAAKiB,IAAI,CAACd,UAAUU,IAAIM,IAAI,EAAEd,UAAUM;IACrD,MAAMS,aAAapB,KAAKqB,QAAQ,CAACb,KAAKR,KAAKsB,OAAO,CAACd;IACnD,MAAMe,aAAavB,KAAKiB,IAAI,CAACC,MAAME;IACnClB,OAAOsB,IAAI,CAACN;IAEZ,MAAMO,QAAQ,IAAIrB,MAAM;IACxB,IAAK,MAAMsB,WAAWb,IAAIc,GAAG,CAAE;QAC7B,MAAMC,cAAc5B,KAAK6B,OAAO,CAACN,YAAY,gBAAgBV,IAAIM,IAAI;QACrE,MAAMW,UAAU9B,KAAK6B,OAAO,CAACN,YAAY,gBAAgB,QAAQG;QAEjEK,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAET,YAAY;QAEtC,8BAA8B;QAC9BE,MAAMQ,KAAK,CAAC3B,WAAW4B,IAAI,CAAC,MAAM1B,KAAKC;QAEvC,UAAU;QACVgB,MAAMQ,KAAK,CAAChC,MAAMiC,IAAI,CAAC,MAAM,OAAO;YAAC;YAAO;YAAY;YAAO;SAAU,EAAE;YAAEC,OAAO;YAAWxB,KAAKY;QAAW;QAE/G,eAAe;QACfE,MAAMQ,KAAK,CAAClC,GAAGqC,MAAM,CAACF,IAAI,CAAC,MAAMN,aAAa,GAAGA,YAAY,KAAK,CAAC;QACnEH,MAAMQ,KAAK,CAAClC,GAAGsC,OAAO,CAACH,IAAI,CAAC,MAAMvB,KAAKiB,aAAa;QAEpD,WAAW;QACXH,MAAMQ,KAAK,CAAClC,GAAGqC,MAAM,CAACF,IAAI,CAAC,MAAMJ,SAAS,GAAGA,QAAQ,KAAK,CAAC;QAC3DL,MAAMQ,KAAK,CAAClC,GAAGsC,OAAO,CAACH,IAAI,CAAC,MAAMlC,KAAK6B,OAAO,CAACS,KAAK,CAAC,MAAM;YAAC3B;SAAI,CAAC4B,MAAM,CAAC1B,IAAIc,GAAG,CAACD,QAAQ,CAACc,KAAK,CAAC,QAAQV,SAAS;QAEhHL,MAAMgB,KAAK,CAAC,CAACC;YACXX,QAAQC,GAAG,CAAC;YACZU,MAAMhC,SAASgC,OAAOhC,SAAS,MAAMa;QACvC;IACF;AACF"}