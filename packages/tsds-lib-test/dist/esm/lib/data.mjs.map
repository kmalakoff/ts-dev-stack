{"version":3,"sources":["data.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst Queue = require('queue-cb');\nconst spawn = require('cross-spawn-cb');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst mkdirp = require('mkdirp');\nconst shortHash = require('short-hash');\n\nconst prepareGit = require('./prepareGit');\n\nmodule.exports = function data(git, options, callback) {\n  const cwd = options.cwd || process.cwd();\n  const pkg = require(path.join(cwd, 'package.json'));\n  const dest = path.join(tmpdir(), pkg.name, shortHash(cwd));\n  const targetName = path.basename(git, path.extname(git));\n  const targetPath = path.join(dest, targetName);\n  mkdirp.sync(dest);\n\n  const queue = new Queue(1);\n  for (const binName in pkg.bin) {\n    const packagePath = path.resolve(targetPath, 'node_modules', pkg.name);\n    const binPath = path.resolve(targetPath, 'node_modules', '.bin', binName);\n\n    console.log('------------------');\n    console.log(`Preparing: ${targetPath}`);\n\n    // clone or reset the git repo\n    queue.defer(prepareGit.bind(null, git, options));\n\n    // install\n    queue.defer(spawn.bind(null, 'nvu', ['lts', '--silent', 'npm', 'install'], { stdio: 'inherit', cwd: targetPath }));\n\n    // link package\n    queue.defer(fs.rename.bind(null, packagePath, `${packagePath}.tsds`));\n    queue.defer(fs.symlink.bind(null, cwd, packagePath, 'dir'));\n\n    // link bin\n    queue.defer(fs.rename.bind(null, binPath, `${binPath}.tsds`));\n    queue.defer(fs.symlink.bind(null, path.resolve.apply(null, [cwd].concat(pkg.bin[binName].split('/'))), binPath, 'file'));\n\n    queue.await((err) => {\n      console.log('------------------');\n      err ? callback(err) : callback(null, targetPath);\n    });\n  }\n};\n"],"names":["fs","require","path","Queue","spawn","tmpdir","mkdirp","shortHash","prepareGit","module","exports","data","git","options","callback","cwd","process","pkg","join","dest","name","targetName","basename","extname","targetPath","sync","queue","binName","bin","packagePath","resolve","binPath","console","log","defer","bind","stdio","rename","symlink","apply","concat","split","await","err"],"mappings":"AAAA,MAAMA,KAAKC,QAAQ;AACnB,MAAMC,OAAOD,QAAQ;AACrB,MAAME,QAAQF,QAAQ;AACtB,MAAMG,QAAQH,QAAQ;AACtB,MAAMI,SAASJ,QAAQ,MAAMI,MAAM,IAAIJ,QAAQ,WAAWI,MAAM;AAChE,MAAMC,SAASL,QAAQ;AACvB,MAAMM,YAAYN,QAAQ;AAE1B,MAAMO,aAAaP,QAAQ;AAE3BQ,OAAOC,OAAO,GAAG,SAASC,KAAKC,GAAG,EAAEC,OAAO,EAAEC,QAAQ;IACnD,MAAMC,MAAMF,QAAQE,GAAG,IAAIC,QAAQD,GAAG;IACtC,MAAME,MAAMhB,QAAQC,KAAKgB,IAAI,CAACH,KAAK;IACnC,MAAMI,OAAOjB,KAAKgB,IAAI,CAACb,UAAUY,IAAIG,IAAI,EAAEb,UAAUQ;IACrD,MAAMM,aAAanB,KAAKoB,QAAQ,CAACV,KAAKV,KAAKqB,OAAO,CAACX;IACnD,MAAMY,aAAatB,KAAKgB,IAAI,CAACC,MAAME;IACnCf,OAAOmB,IAAI,CAACN;IAEZ,MAAMO,QAAQ,IAAIvB,MAAM;IACxB,IAAK,MAAMwB,WAAWV,IAAIW,GAAG,CAAE;QAC7B,MAAMC,cAAc3B,KAAK4B,OAAO,CAACN,YAAY,gBAAgBP,IAAIG,IAAI;QACrE,MAAMW,UAAU7B,KAAK4B,OAAO,CAACN,YAAY,gBAAgB,QAAQG;QAEjEK,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAET,YAAY;QAEtC,8BAA8B;QAC9BE,MAAMQ,KAAK,CAAC1B,WAAW2B,IAAI,CAAC,MAAMvB,KAAKC;QAEvC,UAAU;QACVa,MAAMQ,KAAK,CAAC9B,MAAM+B,IAAI,CAAC,MAAM,OAAO;YAAC;YAAO;YAAY;YAAO;SAAU,EAAE;YAAEC,OAAO;YAAWrB,KAAKS;QAAW;QAE/G,eAAe;QACfE,MAAMQ,KAAK,CAAClC,GAAGqC,MAAM,CAACF,IAAI,CAAC,MAAMN,aAAa,GAAGA,YAAY,KAAK,CAAC;QACnEH,MAAMQ,KAAK,CAAClC,GAAGsC,OAAO,CAACH,IAAI,CAAC,MAAMpB,KAAKc,aAAa;QAEpD,WAAW;QACXH,MAAMQ,KAAK,CAAClC,GAAGqC,MAAM,CAACF,IAAI,CAAC,MAAMJ,SAAS,GAAGA,QAAQ,KAAK,CAAC;QAC3DL,MAAMQ,KAAK,CAAClC,GAAGsC,OAAO,CAACH,IAAI,CAAC,MAAMjC,KAAK4B,OAAO,CAACS,KAAK,CAAC,MAAM;YAACxB;SAAI,CAACyB,MAAM,CAACvB,IAAIW,GAAG,CAACD,QAAQ,CAACc,KAAK,CAAC,QAAQV,SAAS;QAEhHL,MAAMgB,KAAK,CAAC,CAACC;YACXX,QAAQC,GAAG,CAAC;YACZU,MAAM7B,SAAS6B,OAAO7B,SAAS,MAAMU;QACvC;IACF;AACF"}